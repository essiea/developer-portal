name: Deploy Developer Portal

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials (TerraformEC2Role from Secrets)
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}   # e.g. arn:aws:iam::<account>:role/TerraformEC2Role
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Outputs
        id: tfout
        working-directory: ./terraform
        run: |
          echo "FRONTEND_REPO=$(terraform output -raw frontend_repo_url)" >> $GITHUB_ENV
          echo "BACKEND_REPO=$(terraform output -raw backend_repo_url)" >> $GITHUB_ENV
          echo "CLUSTER=$(terraform output -raw ecs_cluster_name)" >> $GITHUB_ENV
          echo "FRONTEND_SERVICE=$(terraform output -raw frontend_service_name)" >> $GITHUB_ENV
          echo "BACKEND_SERVICE=$(terraform output -raw backend_service_name)" >> $GITHUB_ENV
          echo "COGNITO_DOMAIN=$(terraform output -raw cognito_domain)" >> $GITHUB_ENV
          echo "COGNITO_CLIENT_ID=$(terraform output -raw cognito_client_id)" >> $GITHUB_ENV
          echo "GIT_SHA=${{ github.sha }}" >> $GITHUB_ENV

      - name: Log in to Amazon ECR
        run: |
          ECR_REGISTRY=$(echo $FRONTEND_REPO | cut -d'/' -f1)
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
            | docker login --username AWS --password-stdin $ECR_REGISTRY

      - name: Build and Push Frontend
        run: |
          set -euo pipefail
          docker build \
            --build-arg VITE_COGNITO_DOMAIN=${{ env.COGNITO_DOMAIN }} \
            --build-arg VITE_COGNITO_CLIENT_ID=${{ env.COGNITO_CLIENT_ID }} \
            --build-arg VITE_API_BASE=/api \
            -t $FRONTEND_REPO:${{ env.GIT_SHA }} \
            -t $FRONTEND_REPO:latest ./frontend
          docker push $FRONTEND_REPO:${{ env.GIT_SHA }}
          docker push $FRONTEND_REPO:latest

      - name: Build and Push Backend
        run: |
          set -euo pipefail
          docker build -t $BACKEND_REPO:${{ env.GIT_SHA }} -t $BACKEND_REPO:latest ./backend
          docker push $BACKEND_REPO:${{ env.GIT_SHA }}
          docker push $BACKEND_REPO:latest

      - name: Update ECS Task Definitions
        working-directory: ./terraform
        run: |
          terraform apply -auto-approve \
            -var="frontend_image=$FRONTEND_REPO:${{ env.GIT_SHA }}" \
            -var="backend_image=$BACKEND_REPO:${{ env.GIT_SHA }}"

      - name: Force ECS Deployment - Frontend
        run: |
          aws ecs update-service \
            --cluster $CLUSTER \
            --service $FRONTEND_SERVICE \
            --force-new-deployment \
            --region ${{ secrets.AWS_REGION }}

      - name: Force ECS Deployment - Backend
        run: |
          aws ecs update-service \
            --cluster $CLUSTER \
            --service $BACKEND_SERVICE \
            --force-new-deployment \
            --region ${{ secrets.AWS_REGION }}

